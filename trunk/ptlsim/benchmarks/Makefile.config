# -*- makefile -*-

CC = gcc
CCLINK = gcc
FC = gfortran-4.0.2
CFLAGS = -DBENCHMARK -O3 -march=k8 -funroll-loops -fno-trapping-math -mfpmath=sse -funit-at-a-time -fprefetch-loop-arrays -include ../../ptlcalls.h
FFLAGS = -DBENCHMARK -O3 -march=k8 -funroll-loops -fno-trapping-math -mfpmath=sse -funit-at-a-time -fprefetch-loop-arrays

LINKFLAGS = -lm

.c.o:
	$(CC) -c $(CFLAGS) $^

.f.o:
	$(FC) -c $(FFLAGS) $^

.cpp.o:
	g++ -c $(CFLAGS) $^

.cc.o:
	g++ -c $(CFLAGS) $^

all: $(OUTPUT)

test.dat-64bit.S: test.dat Makefile
	objdump --adjust-vma=$(BASEADDR) -rtd -b binary -m i386:x86-64:intel --disassemble-all test.dat > test.dat-64bit.S
	objdump --adjust-vma=$(BASEADDR) -rtd -b binary -m i386:x86-64 --disassemble-all test.dat > test.dat-64bit.alt.S

test.dat-32bit.S: test.dat Makefile
	objdump --adjust-vma=$(BASEADDR) -rtd -b binary -m i386:intel --disassemble-all test.dat > test.dat-32bit.S
	objdump --adjust-vma=$(BASEADDR) -rtd -b binary -m i386 --disassemble-all test.dat > test.dat-32bit.alt.S

ifdef USE_FORTRAN
$(OUTPUT): $(SOURCES)
	$(FC) $(FFLAGS) $(SOURCES) -o $(OUTPUT) ../../ptlcalls.o
else
$(OUTPUT): $(SOURCES)
	$(CCLINK) $(CFLAGS) $(SOURCES) -o $(OUTPUT) $(LINKFLAGS)
endif

run:
	../../ptlsim $(COMMAND)
	../../ptlstats ptlsim.stats > ptlsim.stats.txt

run-native:
	$(COMMAND)

BENCHNAME = `echo $(COMMAND) | cut -d" " -f1`

clean:
	rm -f *.o $(OUTPUT)

